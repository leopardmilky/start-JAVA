
public class Ex6_4 {
	/*	<메서드란?>
	 * 
		1. 문장들을 묶어 놓은 것. 
		-작업단위로 문장들을 묶어서 이름을 붙인 것.

		2. 값(입력)을 받아서 처리하고, 결과를 반환(출력)
	
	 	메서드 장점: 중복코드 제거, 관리 용이, 재사용가능.
	 	메서드 작성: 반복적으로 수행되는 여러 문장들을 메서드로 작성.
				하나의 메서드는 한 가지 기능만 수행하도록 작성.
	*/
	
	/*
	 * 	메서드 = 선언부 + 구현부
	 * 
	 * 	반환타입 메서드이름 (타입 변수명, 타입 변수명,....)   -> 선언부
	 * {
	 * 		메서드 호출시 수행될 코드	.				  -> 구현부
	 * }
	 * 
	 * EX)
	 *  	int add (int a, int b)
	 *  	{
	 *  		int result = a + b;
	 *  		return result;	// 호출한 메서드로 결과를 반환한다. 
	 *  	}
	 */

	/*
	 * 
	 * <메서드의 호출>
	 * 
	 * 메서드이름(값1, 값2,.....); 	// 메서드를 호출하는 방법.
	 * 
	 * EX)
	 *		print99danAll():	// void print99danAll()을 호출
	 *		int result = add(3,5);	// int add(int x, int y)를 호출하고, 결과를 result에 저장.
	 *
	 *
	 *
	 */
	
	/*
	 * <메서드의 실행흐름>
	 * 
	 * MyMath mm = new MyMath();	// 먼저 인스턴스를 생성한다.
	 * long value = mm.add(1L, 2L);	//메서드를 호출한다. long value는 mm.add()메서드의 결과값을 저장하기 위한 변수이다.
	 * 								//메서드만 호출한다면 long value는 안써도됨.
	 * 								//EX) print99danAll(); 입력없음
	 * 
	 * long add(long a, long b) {
	 * 			long result = a + b;
	 * 			return result;
	 * }
	 * 
	 * 1. main메서드에서 메서드 add를 호출한다. 인수 1L과 2L이 메서드 add의 매개변수 a,b에 각각 복사(대입)된다.
	 * 2. 메서드 add의 괄호{}안에 있는 문장들이 순서대로 수행된다.
	 * 3. 메서드 add의 모든 문장이 실행되거나 return문을 만나면, 호출한 메서드(main메서드)로 되돌아와서 이후의 문장들을 실행한다. 
	 * 
	 */
	
	/*
	 * 
	 * 
	 */
}
